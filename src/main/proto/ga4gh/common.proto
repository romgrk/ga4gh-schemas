// This file defines common types used in other parts of the schema.
// There are no directly associated methods.

syntax = "proto3";

package ga4gh;

// When returning an HTTP error response, a server may also return a JSON formatted GAException
// to better describe the error.
message GAException {
  // Numerical error code
  int32 error_code = 1;

  // The error message.
  string message = 2;
}

// Indicates the associated DNA strand for some data item.
enum Strand {
  // If no strand data is available.
  STRAND_UNSPECIFIED = 0;

  // The negative (-) strand.
  NEG_STRAND = 1;

  // The postive (+) strand.
  POS_STRAND = 2;
}

// A `Position` is an unoriented base in some `Reference`. A `Position` is
// represented by a `Reference` name, and a base number on that `Reference`
// (0-based).
message Position {
  // The name of the `Reference` on which the `Position` is located.
  string reference_name = 1;

  // The 0-based offset from the start of the forward strand for that
  // `Reference`. Genomic positions are non-negative integers less than
  // `Reference` length.
  int64 position = 2;

  // Strand the position is associated with.
  Strand strand = 3;
}

// Identifier from a public database
message ExternalIdentifier {
  // The source of the identifier, e.g. `Ensembl`.
  string database = 1;

  // The ID defined by the external database, e.g. `ENST00000000000`.
  string identifier = 2;

  // The version of the object or the database, e.g. `78`.
  string version = 3;
}

// An experimental preparation of a sample.
message Experiment {
  string id = 1;                      // "PRO-00015S_N1.wgs",
  string sample_id = 2;               // "PRO-00015S_N1",
  string sequencing_center = 3;       // "McGill",
  string name = 4;                    // "wgs",
  string protocol_type = 5;           // "PCR free",
  string raw_data = 6;                // [ { "md5sum" : "8039276811618fca155650edcf33bd0c", "filename" : "PRO-00015S_N1_WGS_Blood.4121.8.pair1.fastq.gz" } ],
  string assay_type = 7;              // "DNA-seq",
  string experiment_type = 8;         // "Whole genome",
  string experiment_ontology_uri = 9; // "http://..."
  string molecule_ontology_uri = 10;  // "http://..."
  string analysis = 11;               // { JSON Data... }
  string created = 12;                // "iso date"
  string updated = 13;                // "iso date"
}

// An analysis contains an interpretation of one or several experiments. (e.g.
// SNVs, copy number variations, methylation status) together with information
// about the methodology used.
message Analysis {
  // Formats of id | name | description | accessions are described in the
  // documentation on general attributes and formats.
  string id = 1;

  string name = 2;

  string description = 3;

  // The time at which this record was created, in ISO 8601 format.
  string created = 4;

  // The time at which this record was last updated, in ISO 8601 format.
  string updated = 5;

  // The type of analysis.
  string type = 6;

  // The software run to generate this analysis.
  repeated string software = 7;

  // A map of additional analysis information.
  Attributes attributes = 9;
}

// An ontology term describing an attribute. (e.g. the phenotype attribute
// 'polydactyly' from HPO)
message OntologyTerm {
  // Ontology term identifier - the CURIE for an ontology term. It
  // differs from the standard GA4GH schema's :ref:`id <apidesign_object_ids>`
  // in that it is a CURIE pointing to an information resource outside of the
  // scope of the schema or its resource implementation.
  string term_id = 1;

  // Ontology term - the label of the ontology term the termId is pointing to.
  string term = 2;
}

// A Program describes software used in data processing or analysis.
message Program {
  // The command line used to run this program.
  string command_line = 1;

  // The user specified ID of the program.
  string id = 2;

  // The name of the program.
  string name = 3;

  // The ID of the program run before this one.
  string prev_program_id = 4;

  // The version of the program run.
  string version = 5;
}

enum NullValue {
  // Null value.
  NULL_VALUE = 0;
}

// Type defining a collection of attributes associated with various protocol
// records. Each attribute is a name that maps to an array of one or more
// values. Values are chosen from both internal protobuf types and GA4GH.
//  Values should be split into array elements instead of using a separator
// syntax that needs to parsed.
message AttributeValue {
  oneof value {
    string string_value = 1;
    int64 int64_value = 2;
    int32 int32_value = 3;
    bool bool_value = 4;
    double double_value = 5;
    ExternalIdentifier external_identifier = 6;
    OntologyTerm ontology_term = 7;
    Experiment experiment = 8;
    Program program = 9;
    Analysis analysis = 10;
    NullValue null_value = 11;
    Attributes attributes = 12;
    AttributeValueList attribute_list = 13;
  }
}

message AttributeValueList {
  repeated AttributeValue values = 1;
}

message Attributes {
  map<string, AttributeValueList> attr = 1;
}
